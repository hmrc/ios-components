fastlane_require 'semantic'

require 'pathname'


default_platform(:ios)

platform :ios do
  # SWIFT PACKAGE MANAGEMENT LANES
  ####################################################################################
  desc "Get project path and replace remote components with local"
  lane :sync_project_with_local_components do |options|
    # Updates xcode package url
    remote_url =  ENV['REMOTE_COMPONENTS_URL']
    local_url = Pathname(Dir.pwd).dirname.to_s
    package_resolved_path = ENV['LOCAL_PROJECT_PATH'] + "/project.pbxproj"
    if options.has_key?(:update_companion)
      package_resolved_path = "#{local_url}/CompanionApp/CompanionApp.xcodeproj/project.pbxproj"
    end
    puts "package_resolved_path: #{package_resolved_path}"
    local_url = "file://" + local_url

    text = File.read(package_resolved_path)
    replaced_text = text.gsub(remote_url, local_url)

    File.open(package_resolved_path, "w") {|file| file.puts replaced_text }

    # Adds current remote tag to tag file
    tag_values_filename = ENV['TAG_FILE']
    File.open(tag_values_filename, "w") {|f| f.puts last_git_tag }

  end

  desc "Creates a development tag and updates projects using this swift package"
  lane :update_dependent_projects do |options|
    local_url = Pathname(Dir.pwd).dirname.to_s
    package_resolved_path = ENV['LOCAL_PROJECT_PATH'] + "/project.pbxproj"
    if options.has_key?(:update_companion)
      package_resolved_path = "#{local_url}/CompanionApp/CompanionApp.xcodeproj/project.pbxproj"
    end
    local_url = "file://" + local_url

    last_local_tag = last_git_tag
    dev_tag = Time.now.to_i.to_s + ".0.0" # .0.0 is required for Xcode to solve the versioning
    sh('swift package generate-xcodeproj') # Make sure changes to the manifest file are carried through to the dev package
    sh("[[ -z $(git status -s) ]] || git commit -a -m 'development commit for " + dev_tag + "'")
    sh("git tag " + dev_tag)

    # Updates Swift Package Manifest
    text = File.read(package_resolved_path)
    replaced_text = text.gsub(last_local_tag, dev_tag)
    File.open(package_resolved_path, "w") {|file| file.puts replaced_text }

    # Stores tags in file for use later
    tag_values_filename = ENV['TAG_FILE']
    File.open(tag_values_filename, "a") {|f| f.write("\n" + dev_tag) }

  end

  desc "Reset dependent projects to remote URL"
  lane :reset_dependent_projects do |options|
    remote_url =  ENV['REMOTE_COMPONENTS_URL']
    local_url = Pathname(Dir.pwd).dirname.to_s
    package_resolved_path = ENV['LOCAL_PROJECT_PATH'] + "/project.pbxproj"
    if options.has_key?(:update_companion)
      package_resolved_path = "#{local_url}/CompanionApp/CompanionApp.xcodeproj/project.pbxproj"
    end
    local_url = "file://" + local_url

    tag_values_filename = ENV['TAG_FILE']
    tag_values = File.readlines(tag_values_filename)

    text = File.read(package_resolved_path)
    replaced_text = text.gsub(local_url, remote_url)
    replaced_text = replaced_text.gsub(tag_values.last, tag_values.first.gsub("\n", ""))

    File.open(package_resolved_path, "w") {|file| file.puts replaced_text }

    tag_values.drop(1).each { |x| sh("git tag -d " + x) }

    sh("rm " + tag_values_filename)
  end

  # GENERAL DEVELOPMENT LANES
  ####################################################################################
  desc "Sync development profiles for companion app"
  lane :dev_certs do
    syncDebugCerts()
  end

  desc "Regenerate development profiles for companion app"
  lane :regenerate_dev_certs do
    match(
      app_identifier: ["uk.gov.hmrc.ngc.UIComponentsTestApp"],
      type: "development"
    )
  end

  def syncDebugCerts(force_for_new_devices=false)
    match(
      app_identifier: ["uk.gov.hmrc.ngc.UIComponentsTestApp"],
      type: "development",
      readonly: !force_for_new_devices,
      force_for_new_devices: force_for_new_devices
    )
  end

  desc "This will sync adhoc certificates to allow the companion app to build on CI"
  lane:sync_certificates do
    syncAdhocCerts()
  end

  def syncAdhocCerts(force_for_new_devices=false)
    match(
      app_identifier: ["uk.gov.hmrc.ngc.UIComponentsTestApp"],
      type: "adhoc",
      readonly: !force_for_new_devices,
      force_for_new_devices: force_for_new_devices
    )
  end

  desc "Build adhoc app for testing"
  lane :build_adhoc_app do |options|
    syncAdhocCerts()
    gym(
      project: options[:project_path],
      configuration: "Release",
      export_method: "ad-hoc",
      output_directory: options[:output]
    )
  end

  desc "Register new devices"
    lane :register_new_device do
    device_name = prompt(text: "Enter the device name: ")
    device_udid = prompt(text: "Enter the device UDID: ")
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(devices: device_hash)
    syncDebugCerts(true)
    syncAdhocCerts(true)
  end

  desc "Create a new tagged release of the library."
  desc "This will bump the release tag, precompile the library, commit and tag the changes, then push up to master."
  lane :take_release do
    begin
      sh("gh --version")
    rescue => exception
      UI.error exception
      UI.user_error!("Github CLI must be installed. See https://github.com/cli/cli")
    end

    UI.user_error!("You need to provide a Github Personal token via a `GITHUB_TOKEN` environment variable - you can create a new token on Github https://github.com/settings/tokens/new") unless !ENV["GITHUB_TOKEN"].nil?
    UI.user_error!("You need to provide the Bitrise token via a `BITRISE_TOKEN` environment variable") unless !ENV["BITRISE_TOKEN"].nil?
    UI.user_error!("You need to provide the Bitrise app slug for this repo via a `IOS_COMPONENTS_APP_SLUG` environment variable") unless !ENV["IOS_COMPONENTS_APP_SLUG"].nil?
    UI.user_error!("You need to provide the Bitrise release workflow ID this repo via a `IOS_COMPONENTS_RELEASE_WORKFLOW_ID` environment variable") unless !ENV["IOS_COMPONENTS_RELEASE_WORKFLOW_ID"].nil?
    # make sure we're on main
    ensure_git_branch(
      branch: 'main'
    )
    # pull latest changes and fetch tags
    git_pull
    # get current version
    current_tag = last_git_tag
    version = Semantic::Version.new(current_tag)
    # prompt for bump type
    bump_type = UI.select(
      "Current version is #{current_tag}. What version would you like to give this release?",
      ["major", "minor", "patch"]
    )
    # increment version
    case bump_type
    when "major"
      version = version.increment!(:major)
    when "minor"
      version = version.increment!(:minor)
    else
      version = version.increment!(:patch)
    end
    project_version = version.to_string

    # sh('swift package generate-xcodeproj')
    branch_name = "release/" + project_version
    sh('git checkout -b ' + branch_name)

    # update changelog
    stamp_changelog(
      section_identifier: project_version
    )
    git_commit(
      path: ["./CHANGELOG.md"],
      message: "Update changelog for release #{project_version}"
    )

    sh('git add .')
    sh("[[ -z $(git status -s) ]] || git commit -a -m 'Generate swift package for " + project_version + "'")
    sh('git push --set-upstream origin ' + branch_name)
    # ensure repo is clean
    ensure_git_status_clean
    ensure_git_branch(branch: "^release\/" + project_version)

    # take tag and push to remote
    add_git_tag(tag: project_version)
    push_git_tags

    # update releases on Github
    changelog = read_changelog(
      section_identifier: "[#{project_version}]",
      excluded_markdown_elements: []
    )
    set_github_release(
      repository_name: "hmrc/ios-components",
      api_token: ENV["GITHUB_TOKEN"],
      name: project_version,
      tag_name: project_version,
      description: changelog
    )

    # start release process on CI
    sh("cd .. && sh release.sh '#{project_version}'")

    local_url = Pathname(Dir.pwd).dirname.to_s
    companion_path = "#{local_url}/CompanionApp/CompanionApp.xcodeproj/project.pbxproj"
    local_url = "file://" + local_url

    # Updates Swift Package Manifest
    text = File.read(companion_path)
    replaced_text = text.gsub(current_tag, project_version)
    File.open(companion_path, "w") {|file| file.puts replaced_text }
    sh("[[ -z $(git status -s) ]] || git commit -a -m 'Updated companion app version to #{project_version}'")
    sh('git push origin ' + branch_name)
    sh('gh pr create --title "Release PR for ' + project_version + '" --base main')
  end

  desc "Generate component screenshots using companion app"
  desc "Using xcodebuild over scan because it does not allow us to specify the exact simulator to use as it overrides the `-destination` flag we need to set"
  desc "Example:"
  desc " `fastlane generate_screenshots device:'iPhone XS Max' version:'latest'`"
  desc "Options:"
  desc " - device: (Required) Simulator to run the tests on"
  desc " - version: (Optional) iOS version of the Simulator"
  desc " - force_dark_mode: (Optional)"
  lane :generate_screenshots do |options|
    DEFAULT = {
      force_dark_mode: false
    }
    options = DEFAULT.merge(options)

    local_url = Pathname(Dir.pwd).dirname.to_s
    companion_project_path = "#{local_url}/CompanionApp/CompanionApp.xcodeproj"

    begin
      open_booted_sim options
      sim = simulator(options)
      sh "xcodebuild \
      -project '#{companion_project_path}' \
      -scheme 'CompanionApp' \
      -destination 'platform=iOS Simulator,id=#{sim.udid}' \
      clean test"
    rescue FastlaneCore::Interface::FastlaneBuildFailure => e
      UI.user_error!(e)
    rescue FastlaneCore::Interface::FastlaneTestFailure => e
      UI.user_error!(e)
    rescue => e
      UI.user_error!("Unhandled error:\n#{e}")
    end
  end

  def simulator(options)
    device_string = options[:device] || UI.user_error!("Missing required parameter `device`")
    version = options[:version] || 'latest'
    if version != 'latest'
      device_string += " (#{version})"
    end

    available_sims = FastlaneCore::Simulator.all
    if version != 'latest'
      sim = available_sims.detect { |d| device_string == "#{d.name} (#{d.os_version})" }
    else
      sim = available_sims.detect { |d| device_string == "#{d.name}" }
    end
    UI.message("Selected Simulator:")
    UI.message("#{sim.name} (#{sim.os_version}) #{sim.udid}")
    return sim
  end

  desc "Open and boot named simulator"
  desc "Example:"
  desc "`fastlane open_booted_sim device:'iPhone 11 Pro Max' version:'latest'`"
  desc "Options:"
  desc " - device: (Required) Simulator to run the tests on"
  desc " - version: (Optional) iOS version of the Simulator"
  lane :open_booted_sim do |options|
    sim = simulator(options)

    if sim.nil?
      UI.error "Device not found: #{device_string}"
        next
    end

    UI.important("Booting #{sim.name}")
    `xcrun simctl boot #{sim.udid} > /dev/null 2>&1`
    if options[:force_dark_mode]
      UI.important("Setting dark mode")
      `xcrun simctl ui #{sim.udid} appearance dark`
    else
      UI.important("Setting light mode")
      `xcrun simctl ui #{sim.udid} appearance light`
    end
    `open $(xcode-select -p)/Applications/Simulator.app`
  end

  desc "Find differences between baseline screenshots and locally generated screenshots."
  desc "Make sure you completely run the IntegrationTests target against iPhone 11 Max to generate a complete set of screenshots."
  desc "Once you have a full set of screenshots, you can rerun individual tests to update individual screenshots."
  desc "Example:"
  desc " `fastlane screenshot_diff`"
  lane :screenshot_diff do |options|
    DEFAULT = {
      mode: "light"
    }
    options = DEFAULT.merge(options)

    mode = "#{options[:mode]}"
    captureFolder = "capture_#{mode}_mode"
    mismatchFolder = "screenshot_diff/mismatches/#{mode}"
    imagesFolder = "screenshot_diff/images/#{mode}"
    baseline = "screenshot_diff/baseline_screenshots/#{mode}"
    sh 'mkdir -p ' + imagesFolder
    sh "cp -R ../CompanionApp/Artifacts/#{captureFolder}/screens/ #{imagesFolder}"
    if Dir.entries(imagesFolder).size > Dir.entries(baseline).size
      UI.error("""
        /********************************************************
         * Baseline does not contain every generated screenshot.*
         ********************************************************/
        """)
    end
    sh 'cd screenshot_diff && npm install'
    sh 'rm -R ' + mismatchFolder + ' || true'
    sh 'mkdir -p ' + mismatchFolder
    sh "cd screenshot_diff && npm start --baseline=#{mode}"
    if Dir.entries(mismatchFolder).size > 2
      sh 'cp -R ' + mismatchFolder + ' ../CompanionApp/Artifacts/mismatches/'
      fileNames = Dir.entries(mismatchFolder).select { |f| File.file? File.join(mismatchFolder, f) }
      File.write("../CompanionApp/Artifacts/diff_report_#{mode}.txt", fileNames.join("\n"))
      UI.test_failure!("Screenshots did not match")
    else
      sh "mkdir -p ../CompanionApp/Artifacts/mismatches"
      sh 'echo "No mismatches - need this file to stop Bitrise zip/deploy step failing when folder is empty!" > ../CompanionApp/Artifacts/mismatches/no_mismatches.txt'
      sh 'echo "All Screenshots matched" > ../CompanionApp/Artifacts/diff_report' + "_#{mode}" + '.txt'
    end
  end
end
